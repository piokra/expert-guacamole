// Generated by CoffeeScript 1.10.0
(function() {
  var $, Window,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = require('../jquery-3.1.0');

  Window = (function() {
    function Window(args) {
      this.onBarUnclick = bind(this.onBarUnclick, this);
      this.onBarMove = bind(this.onBarMove, this);
      this.onBarClick = bind(this.onBarClick, this);
      this.resize = bind(this.resize, this);
      this.move = bind(this.move, this);
      this.updateWindow = bind(this.updateWindow, this);
      this.toggleSize = bind(this.toggleSize, this);
      this.toggleShow = bind(this.toggleShow, this);
      this.changeZIndex = bind(this.changeZIndex, this);
      var bar, body, button, close, counter, j, len, minimize, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, toggleSize;
      this.parent = args.parent, this.x = (ref = args.x) != null ? ref : 50, this.y = (ref1 = args.y) != null ? ref1 : 50, this.width = (ref2 = args.width) != null ? ref2 : 800, this.height = (ref3 = args.height) != null ? ref3 : 600, this.buttonSize = (ref4 = args.buttonSize) != null ? ref4 : 60, this.title = (ref5 = args.title) != null ? ref5 : "", this.buttonSpacing = (ref6 = args.buttonSpacing) != null ? ref6 : 12, this.zindex = (ref7 = args.zindex) != null ? ref7 : 1;
      ref8 = this.divs(6, 'popup-element'), this.dom = ref8[0], bar = ref8[1], body = ref8[2], close = ref8[3], minimize = ref8[4], toggleSize = ref8[5];
      bar.innerHTML = this.title;
      $(this.dom).addClass('popup');
      $(this.dom).append(bar, body);
      $(this.dom).css({
        'z-index': "" + this.zindex,
        top: this.y + "px",
        left: this.x + "px",
        width: this.width + "px",
        height: this.height + "px"
      });
      $(bar).css("font-size", this.buttonSize + "px");
      $(bar).addClass('popup-bar').css({
        height: (this.buttonSize * 1.33) + "px"
      });
      $(bar).append([close, minimize, toggleSize]);
      $(body).addClass('popup-body');
      $([close, toggleSize, minimize]).addClass('popup-bar-button').css("width", this.buttonSize + "px").css("height", this.buttonSize + "px");
      counter = this.buttonSpacing;
      ref9 = [close, toggleSize, minimize];
      for (j = 0, len = ref9.length; j < len; j++) {
        button = ref9[j];
        $(button).css("right", counter + "px");
        counter += this.buttonSpacing + this.buttonSize;
      }
      toggleSize.addEventListener('click', this.toggleSize);
      minimize.addEventListener('click', this.toggleShow);
      this.maximized = false;
      $(bar).mousedown(this.onBarClick).mousemove(this.onBarMove).mouseup(this.onBarUnclick).mouseleave(this.onBarMove);
    }

    Window.prototype.changeZIndex = function(diff) {
      this.zindex += diff;
      if (this.zindex < 1) {
        this.zindex = 1;
      }
      return $(this.dom).css("z-index", this.zindex);
    };

    Window.prototype.divs = function(count, classes) {
      var dom, doms, i;
      i = 0;
      doms = [];
      while (i < count) {
        dom = $('<div>');
        if (classes) {
          dom.addClass(classes);
        }
        doms.push(dom[0]);
        i++;
      }
      console.log(doms);
      return doms;
    };

    Window.prototype.toggleShow = function() {
      $(this.dom).toggleClass('hidden');
      return this.parent.toggleShow(this);
    };

    Window.prototype.toggleSize = function() {
      this.maximized = !this.maximized;
      this.updateWindow();
      return this.parent.toggleSize(this);
    };

    Window.prototype.updateWindow = function() {
      if (this.maximized) {
        return $(this.dom).css({
          width: "100vw",
          height: "100vh",
          top: "0px",
          left: "0px"
        });
      } else {
        return $(this.dom).css({
          top: this.y + "px",
          left: this.x + "px",
          width: this.width + "px",
          height: this.height + "px"
        });
      }
    };

    Window.prototype.move = function(x, y) {
      this.x = x;
      this.y = y;
      return this.updateWindow();
    };

    Window.prototype.resize = function(width, height) {
      this.width = width;
      this.height = height;
      this.updateWindow();
      return this.parent.resize(this);
    };

    Window.prototype.onBarClick = function(ev) {
      this.dragClickX = ev.clientX;
      this.dragClickY = ev.clientY;
      this.clicked = true;
      return this.parent.click(this);
    };

    Window.prototype.onBarMove = function(ev) {
      var dx, dy;
      if (this.clicked) {
        dx = ev.clientX - this.dragClickX;
        dy = ev.clientY - this.dragClickY;
        this.move(this.x + dx, this.y + dy);
        this.dragClickX = ev.clientX;
        return this.dragClickY = ev.clientY;
      }
    };

    Window.prototype.onBarUnclick = function(ev) {
      return this.clicked = false;
    };

    return Window;

  })();

  module.exports = Window;

}).call(this);
